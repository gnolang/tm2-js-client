// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: tm2/multisig.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import Long from 'long';
import { Any } from '../google/protobuf/any';

export const protobufPackage = 'tm';

/** messages */
export interface PubKeyMultisig {
  k: Long;
  pub_keys: Any[];
}

export interface Multisignature {
  bit_array?: CompactBitArray | undefined;
  sigs: Uint8Array[];
}

export interface CompactBitArray {
  /** The number of extra bits in elems. */
  extra_bits_stored: number;
  elems: Uint8Array;
}

function createBasePubKeyMultisig(): PubKeyMultisig {
  return { k: Long.UZERO, pub_keys: [] };
}

export const PubKeyMultisig: MessageFns<PubKeyMultisig> = {
  encode(
    message: PubKeyMultisig,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (!message.k.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.k.toString());
    }
    for (const v of message.pub_keys) {
      Any.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PubKeyMultisig {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePubKeyMultisig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.k = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pub_keys.push(Any.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PubKeyMultisig {
    return {
      k: isSet(object.threshold)
        ? Long.fromValue(object.threshold)
        : Long.UZERO,
      pub_keys: globalThis.Array.isArray(object?.pubkeys)
        ? object.pubkeys.map((e: any) => Any.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PubKeyMultisig): unknown {
    const obj: any = {};
    if (message.k !== undefined) {
      obj.threshold = (message.k || Long.UZERO).toString();
    }
    if (message.pub_keys?.length) {
      obj.pubkeys = message.pub_keys.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PubKeyMultisig>, I>>(
    base?: I
  ): PubKeyMultisig {
    return PubKeyMultisig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PubKeyMultisig>, I>>(
    object: I
  ): PubKeyMultisig {
    const message = createBasePubKeyMultisig();
    message.k =
      object.k !== undefined && object.k !== null
        ? Long.fromValue(object.k)
        : Long.UZERO;
    message.pub_keys = object.pub_keys?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMultisignature(): Multisignature {
  return { bit_array: undefined, sigs: [] };
}

export const Multisignature: MessageFns<Multisignature> = {
  encode(
    message: Multisignature,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.bit_array !== undefined) {
      CompactBitArray.encode(
        message.bit_array,
        writer.uint32(10).fork()
      ).join();
    }
    for (const v of message.sigs) {
      writer.uint32(18).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Multisignature {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultisignature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bit_array = CompactBitArray.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sigs.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Multisignature {
    return {
      bit_array: isSet(object.bit_array)
        ? CompactBitArray.fromJSON(object.bit_array)
        : undefined,
      sigs: globalThis.Array.isArray(object?.sigs)
        ? object.sigs.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: Multisignature): unknown {
    const obj: any = {};
    if (message.bit_array !== undefined) {
      obj.bit_array = CompactBitArray.toJSON(message.bit_array);
    }
    if (message.sigs?.length) {
      obj.sigs = message.sigs.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Multisignature>, I>>(
    base?: I
  ): Multisignature {
    return Multisignature.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Multisignature>, I>>(
    object: I
  ): Multisignature {
    const message = createBaseMultisignature();
    message.bit_array =
      object.bit_array !== undefined && object.bit_array !== null
        ? CompactBitArray.fromPartial(object.bit_array)
        : undefined;
    message.sigs = object.sigs?.map((e) => e) || [];
    return message;
  },
};

function createBaseCompactBitArray(): CompactBitArray {
  return { extra_bits_stored: 0, elems: new Uint8Array(0) };
}

export const CompactBitArray: MessageFns<CompactBitArray> = {
  encode(
    message: CompactBitArray,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.extra_bits_stored !== 0) {
      writer.uint32(8).uint32(message.extra_bits_stored);
    }
    if (message.elems.length !== 0) {
      writer.uint32(18).bytes(message.elems);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompactBitArray {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompactBitArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.extra_bits_stored = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.elems = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(json: any): CompactBitArray {
    if (json === null) {
      // Handle null case
      return createBaseCompactBitArray();
    }

    if (typeof json !== 'string') {
      throw new Error(
        `CompactBitArray in JSON should be a string or null but got ${typeof json}`
      );
    }

    const bits = json;
    const numBits = bits.length;

    // Create a new CompactBitArray
    const numBytes = Math.ceil(numBits / 8);
    const elems = new Uint8Array(numBytes);
    const extraBitsStored = numBits % 8;
    const bitArray = { extra_bits_stored: extraBitsStored, elems };

    // Set bits based on the string representation
    for (let i = 0; i < numBits; i++) {
      if (bits[i] === 'x') {
        compactBitArraySetIndex(bitArray, i, true);
      }
      // For '_', we don't need to do anything as bits are initialized to 0
    }

    return bitArray;
  },

  toJSON(message: CompactBitArray): unknown {
    throw new Error('not implemented');
  },

  create<I extends Exact<DeepPartial<CompactBitArray>, I>>(
    base?: I
  ): CompactBitArray {
    return CompactBitArray.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompactBitArray>, I>>(
    object: I
  ): CompactBitArray {
    const message = createBaseCompactBitArray();
    message.extra_bits_stored = object.extra_bits_stored ?? 0;
    message.elems = object.elems ?? new Uint8Array(0);
    return message;
  },
};

export function createCompactBitArray(bits: number): CompactBitArray {
  if (bits <= 0) {
    throw new Error('empty');
  }

  const extraBitsStored = bits % 8;
  const elems = new Uint8Array(Math.ceil(bits / 8));

  return { extra_bits_stored: extraBitsStored, elems };
}

export function compactBitArraySize(bA: CompactBitArray): number {
  if (bA.elems === null) {
    return 0;
  } else if (bA.extra_bits_stored === 0) {
    return bA.elems.length * 8;
  }
  return (bA.elems.length - 1) * 8 + bA.extra_bits_stored;
}

// SetIndex sets the bit at index i within the bit array
// Returns true if successful, false if out of bounds or array is null
export function compactBitArraySetIndex(
  bA: CompactBitArray,
  i: number,
  v: boolean
): boolean {
  if (bA.elems === null) {
    return false;
  }

  if (i >= compactBitArraySize(bA)) {
    return false;
  }

  if (v) {
    // Set the bit (most significant bit first)
    bA.elems[i >> 3] |= 1 << (7 - (i % 8));
  } else {
    // Clear the bit
    bA.elems[i >> 3] &= ~(1 << (7 - (i % 8)));
  }

  return true;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString('base64');
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(''));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
